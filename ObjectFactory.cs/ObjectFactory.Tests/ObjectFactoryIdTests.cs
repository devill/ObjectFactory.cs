using static ObjectFactory.GlobalObjectFactory;

namespace ObjectFactory.Tests;

public class ObjectFactoryIdTests
{
    public class BasicRegistrationTests
    {
        [Fact]
        public void Register_WithValidIdAndObject_ShouldStoreMapping()
        {
            var factory = new ObjectFactory();
            var obj = new TestService();

            factory.Register(obj, "testObj");

            var retrievedId = factory.GetRegisteredId(obj);
            Assert.Equal("testObj", retrievedId);

            var retrievedObj = factory.GetRegisteredObject<TestService>("testObj");
            Assert.Same(obj, retrievedObj);
        }

        [Fact]
        public void Register_WithDuplicateId_ShouldThrowException()
        {
            var factory = new ObjectFactory();
            var obj1 = new TestService();
            var obj2 = new TestService();

            factory.Register(obj1, "duplicateId");

            var ex = Assert.Throws<ArgumentException>(() => factory.Register(obj2, "duplicateId"));
            Assert.Contains("duplicateId", ex.Message);
        }

        [Fact]
        public void Register_WithNullId_ShouldThrowException()
        {
            var factory = new ObjectFactory();
            var obj = new TestService();

            var ex = Assert.Throws<ArgumentNullException>(() => factory.Register(obj, null!));
            Assert.Equal("id", ex.ParamName);
        }

        [Fact]
        public void Register_WithNullObject_ShouldThrowException()
        {
            var factory = new ObjectFactory();

            var ex = Assert.Throws<ArgumentNullException>(() => factory.Register<TestService>(null!, "testId"));
            Assert.Equal("obj", ex.ParamName);
        }
    }

    public class AutoIdGenerationTests
    {
        [Fact]
        public void SetOne_WithoutId_ShouldGenerateAutoId()
        {
            var factory = new ObjectFactory();
            var obj = new TestService();

            factory.SetOne(obj);

            var registeredId = factory.GetRegisteredId(obj);
            Assert.NotNull(registeredId);
            Assert.StartsWith("TestService_", registeredId);
        }

        [Fact]
        public void SetAlways_WithoutId_ShouldGenerateAutoId()
        {
            var factory = new ObjectFactory();
            var obj = new TestService();

            factory.SetAlways(obj);

            var registeredId = factory.GetRegisteredId(obj);
            Assert.NotNull(registeredId);
            Assert.StartsWith("TestService_", registeredId);
        }

        [Fact]
        public void AutoGeneratedIds_ShouldBeUnique()
        {
            var factory = new ObjectFactory();
            var obj1 = new TestService();
            var obj2 = new TestService();
            var obj3 = new TestService();

            factory.SetOne(obj1);
            factory.SetOne(obj2);
            factory.SetAlways(obj3);

            var id1 = factory.GetRegisteredId(obj1);
            var id2 = factory.GetRegisteredId(obj2);
            var id3 = factory.GetRegisteredId(obj3);

            Assert.NotEqual(id1, id2);
            Assert.NotEqual(id2, id3);
            Assert.NotEqual(id1, id3);
        }

        [Fact]
        public void AutoGeneratedIds_ShouldFollowClassNamePattern() // "ClassName_1", "ClassName_2", etc.
        {
            var factory = new ObjectFactory();
            var obj1 = new TestService();
            var obj2 = new TestService();
            var obj3 = new AnotherService();

            factory.SetOne(obj1);
            factory.SetOne(obj2);
            factory.SetOne(obj3);

            var id1 = factory.GetRegisteredId(obj1);
            var id2 = factory.GetRegisteredId(obj2);
            var id3 = factory.GetRegisteredId(obj3);

            Assert.Equal("TestService_1", id1);
            Assert.Equal("TestService_2", id2);
            Assert.Equal("AnotherService_3", id3);
        }

        [Fact]
        public void AutoGeneratedIds_WithMixedTypes_ShouldIncrementGlobally()
        {
            var factory = new ObjectFactory();
            var testService = new TestService();
            var anotherService = new AnotherService();
            var emailService = new EmailService();

            factory.SetOne(testService);
            factory.SetOne(anotherService);
            factory.SetOne(emailService);

            var testId = factory.GetRegisteredId(testService);
            var anotherId = factory.GetRegisteredId(anotherService);
            var emailId = factory.GetRegisteredId(emailService);

            Assert.Equal("TestService_1", testId);
            Assert.Equal("AnotherService_2", anotherId);
            Assert.Equal("EmailService_3", emailId);
        }
    }

    public class LookupTests
    {
        [Fact]
        public void GetRegisteredId_WithRegisteredObject_ShouldReturnId()
        {
            var factory = new ObjectFactory();
            var obj = new TestService();

            factory.Register(obj, "testId");

            var result = factory.GetRegisteredId(obj);
            Assert.Equal("testId", result);
        }

        [Fact]
        public void GetRegisteredId_WithUnregisteredObject_ShouldReturnNull()
        {
            var factory = new ObjectFactory();
            var obj = new TestService();

            var result = factory.GetRegisteredId(obj);
            Assert.Null(result);
        }

        [Fact]
        public void GetRegisteredObject_WithValidId_ShouldReturnObject()
        {
            var factory = new ObjectFactory();
            var obj = new TestService();

            factory.Register(obj, "testId");

            var result = factory.GetRegisteredObject<TestService>("testId");
            Assert.Same(obj, result);
        }

        [Fact]
        public void GetRegisteredObject_WithInvalidId_ShouldReturnNull()
        {
            var factory = new ObjectFactory();

            var result = factory.GetRegisteredObject<TestService>("nonExistentId");
            Assert.Null(result);
        }

        [Fact]
        public void IsRegistered_WithRegisteredObject_ShouldReturnTrue()
        {
            var factory = new ObjectFactory();
            var obj = new TestService();

            factory.Register(obj, "testId");

            var result = factory.IsRegistered(obj);
            Assert.True(result);
        }

        [Fact]
        public void IsRegistered_WithUnregisteredObject_ShouldReturnFalse()
        {
            var factory = new ObjectFactory();
            var obj = new TestService();

            var result = factory.IsRegistered(obj);
            Assert.False(result);
        }
    }

    public class ExtendedSetOneSetAlwaysTests
    {
        [Fact]
        public void SetOne_WithId_ShouldRegisterObjectWithId()
        {
            var factory = new ObjectFactory();
            var obj = new TestService();

            factory.SetOne(obj, "customId");

            var retrievedId = factory.GetRegisteredId(obj);
            Assert.Equal("customId", retrievedId);

            var retrievedObj = factory.GetRegisteredObject<TestService>("customId");
            Assert.Same(obj, retrievedObj);
        }

        [Fact]
        public void SetAlways_WithId_ShouldRegisterObjectWithId()
        {
            var factory = new ObjectFactory();
            var obj = new TestService();

            factory.SetAlways(obj, "customId");

            var retrievedId = factory.GetRegisteredId(obj);
            Assert.Equal("customId", retrievedId);

            var retrievedObj = factory.GetRegisteredObject<TestService>("customId");
            Assert.Same(obj, retrievedObj);
        }

        [Fact]
        public void SetOne_WithId_ShouldStillWorkForDependencyInjection()
        {
            var factory = new ObjectFactory();
            var obj = new TestService();

            factory.SetOne(obj, "testId");

            var result = factory.Create<TestService>();
            Assert.Same(obj, result);

            // Should still be registered with ID
            var retrievedId = factory.GetRegisteredId(obj);
            Assert.Equal("testId", retrievedId);
        }

        [Fact]
        public void SetAlways_WithId_ShouldStillWorkForDependencyInjection()
        {
            var factory = new ObjectFactory();
            var obj = new TestService();

            factory.SetAlways(obj, "testId");

            var result1 = factory.Create<TestService>();
            var result2 = factory.Create<TestService>();

            Assert.Same(obj, result1);
            Assert.Same(obj, result2);

            // Should still be registered with ID
            var retrievedId = factory.GetRegisteredId(obj);
            Assert.Equal("testId", retrievedId);
        }
    }

    public class ThreadingAndCleanupTests
    {
        [Fact]
        public void Registry_ShouldBeThreadSafe()
        {
            var factory = new ObjectFactory();
            var tasks = new List<Task>();
            var objects = new List<TestService>();

            // Create objects in advance to avoid race conditions in object creation
            for (int i = 0; i < 100; i++)
            {
                objects.Add(new TestService());
            }

            // Register objects concurrently
            for (int i = 0; i < 100; i++)
            {
                var index = i; // Capture for closure
                tasks.Add(Task.Run(() =>
                {
                    factory.Register(objects[index], $"TestService_{index}");
                }));
            }

            Task.WaitAll(tasks.ToArray());

            // Verify all objects were registered
            for (int i = 0; i < 100; i++)
            {
                var retrievedObj = factory.GetRegisteredObject<TestService>($"TestService_{i}");
                Assert.Same(objects[i], retrievedObj);
            }
        }

        [Fact]
        public void Clear_ShouldRemoveFromRegistry()
        {
            var factory = new ObjectFactory();
            var obj = new TestService();

            factory.SetAlways(obj, "testId");
            factory.Register(new AnotherTestService(), "otherId");

            // Verify object is registered
            Assert.True(factory.IsRegistered(obj));

            factory.Clear<TestService>();

            // Should be removed from registry
            Assert.False(factory.IsRegistered(obj));
            Assert.Null(factory.GetRegisteredId(obj));
            Assert.Null(factory.GetRegisteredObject<TestService>("testId"));

            // Other types should remain
            Assert.NotNull(factory.GetRegisteredObject<AnotherTestService>("otherId"));
        }

        [Fact]
        public void ClearAll_ShouldClearRegistry()
        {
            var factory = new ObjectFactory();
            var obj1 = new TestService();
            var obj2 = new AnotherTestService();

            factory.Register(obj1, "testId1");
            factory.Register(obj2, "testId2");

            // Verify objects are registered
            Assert.True(factory.IsRegistered(obj1));
            Assert.True(factory.IsRegistered(obj2));

            factory.ClearAll();

            // All should be removed from registry
            Assert.False(factory.IsRegistered(obj1));
            Assert.False(factory.IsRegistered(obj2));
            Assert.Null(factory.GetRegisteredObject<TestService>("testId1"));
            Assert.Null(factory.GetRegisteredObject<AnotherTestService>("testId2"));
        }

        [Fact]
        public void Clear_SpecificType_ShouldOnlyRemoveRegisteredObjectsOfThatType()
        {
            var factory = new ObjectFactory();
            var testService = new TestService();
            var anotherService = new AnotherTestService();

            factory.Register(testService, "testId");
            factory.Register(anotherService, "anotherId");

            factory.Clear<TestService>();

            // TestService should be removed
            Assert.False(factory.IsRegistered(testService));
            Assert.Null(factory.GetRegisteredObject<TestService>("testId"));

            // AnotherTestService should remain
            Assert.True(factory.IsRegistered(anotherService));
            Assert.Same(anotherService, factory.GetRegisteredObject<AnotherTestService>("anotherId"));
        }
    }

    // Test helper classes
    public class TestService
    {
        public string Name { get; set; } = "TestService";
    }

    public class AnotherTestService
    {
        public string Name { get; set; } = "AnotherTestService";
    }

    public class AnotherService
    {
        public string Name { get; set; } = "AnotherService";
    }

    public class EmailService
    {
        public string Name { get; set; } = "EmailService";
    }
}
